# syntax = docker/dockerfile:experimental
# based onhttps://github.com/pytorch/pytorch/blob/master/Dockerfile
# 
# NOTE: To build this you will need a docker version > 18.06 with
#       experimental enabled and DOCKER_BUILDKIT=1
#
#       If you do not use buildkit you are not going to have a good time
#
#       For reference: 
#           https://docs.docker.com/develop/develop-images/build_enhancements/

ARG BASE_IMAGE=ubuntu:22.04
FROM ${BASE_IMAGE} AS dev-base
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get autoclean && \
    apt-get autoremove -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    git \
    curl \
    vim \
    sudo \
    numactl \
    libnuma-dev \
    wget \
    unzip \
    findutils \
    build-essential \
    libzstd1 \
    libgl1 \
    libgl1-mesa-glx \
    libglib2.0-0 \
    bc \
    && rm -rf /var/lib/apt/lists/*


RUN echo "alias ll='ls -l'" >> /root/.bashrc
ENV PATH /opt/conda/bin:$PATH
ARG PYTHON_VERSION=3.9
RUN wget -O ~/miniforge3.sh "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh" && \
    chmod +x ~/miniforge3.sh && \
    bash ~/miniforge3.sh -b -p /opt/conda && \
    rm ~/miniforge3.sh && \
    /opt/conda/bin/conda install -y python=${PYTHON_VERSION} && \
    /opt/conda/bin/conda install -c conda-forge cython==0.29.33 -y && \
    /opt/conda/bin/conda install -c conda-forge setuptools==65.5.1 -y && \
    /opt/conda/bin/conda install -c conda-forge mkl=2022.0.1 mkl-include=2022.0.1 -y && \
    /opt/conda/bin/conda install -c conda-forge llvm-openmp=16.0.6 jemalloc=5.2.1 ninja==1.11.1 -y && \
    /opt/conda/bin/conda install -c conda-forge numpy==1.23.5 -y && \
    /opt/conda/bin/conda install -c conda-forge pycocotools==2.0.2 absl-py==1.4.0 wheel==0.38.1 future==0.18.3 -y && \
    /opt/conda/bin/conda install -c conda-forge pillow==10.2.0 pybind11==2.11.1 pyyaml==6.0.1 boto3==1.34.132 pandas==2.2.2 -y && \
    python -m pip install cmake==3.27.0 intel-openmp==2024.2.1 && \
    /opt/conda/bin/conda clean -ya

#/opt/conda/bin/conda install -c intel mkl=2022.0.1 mkl-include=2022.0.1 intel-openmp=2022.2.1 -y && \

ENV CONDA_PREFIX "/opt/conda"
ARG PYTORCH_VERSION=v1.12.0-rc7
RUN export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"} && \
    python -m pip install opencv-python==4.7.0.72 pybind11 python-multipart==0.0.9 starlette==0.37.2 && \
    git clone https://github.com/pytorch/pytorch.git pytorch && cd pytorch && \
    git config user.email "test@example.com" && \
    git checkout ${PYTORCH_VERSION} && git submodule sync && git submodule update --init --recursive && \
    git fetch origin pull/89925/head && \
    git cherry-pick 78cad998e505b667d25ac42f8aaa24409f5031e1 && \
    python setup.py install && cd .. && \
    rm -rf pytorch

ARG IPEX_VERSION=mlperf/retinanet
ARG INFERENCE=master
ARG OPENCV_VERSION=1ef8175c494dbf9e11fee5913272a2bcc2f6002f
ENV CONDA_PREFIX "/opt/conda"
WORKDIR /workspace
COPY . /workspace
RUN export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"} && \
    export CC=`which gcc` && export CXX=`which g++` && \
    cd retinanet-env && \
    git clone https://github.com/intel/intel-extension-for-pytorch.git ipex-cpu-dev && cd ipex-cpu-dev && \
    git config user.email "test@example.com" && \
    git checkout ${IPEX_VERSION} && \
    git submodule sync && git submodule update --init --recursive && \
    git apply /workspace/runtime_ignore_dequant_check.patch && \
    python setup.py install && \
    export IPEX_PATH=${PWD}/build/Release/packages/intel_extension_for_pytorch && cd .. && \
    git clone https://github.com/mlcommons/inference.git mlperf_inference && cd mlperf_inference && \
    git config user.email "test@example.com" && \
    git checkout ${INFERENCE} && \
    cp mlperf.conf ../../mlperf.conf && \
    cd loadgen && mkdir build && cd build && cmake .. && make && cd .. && \
    CFLAGS="-std=c++14" python setup.py install && export LOADGEN_DIR=${PWD} && cd ../.. && \
    git clone https://github.com/opencv/opencv.git && cd opencv && \
    git config user.email "test@example.com" && \
    git checkout ${OPENCV_VERSION} && \
    mkdir build && cd build && cmake -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_opencv_apps=OFF -DBUILD_LIST=highgui,imgcodecs,imgproc .. && make -j$(nproc) && \
    export OPENCV_DIR=${PWD} && cd ../.. && \
    export RAPIDJSON_INCLUDE_DIR=${PWD}/rapidjson/include && \
    git clone https://github.com/gflags/gflags.git && cd gflags && \
    git config user.email "test@example.com" && \
    git checkout a738fdf93 && mkdir build && cd build && \
    cmake .. && make && export GFLAGS_DIR=${PWD} && cd ../.. && \
    export LIBRARY_PATH=${CONDA_PREFIX}/lib:${LIBRARY_PATH} && \
    rm -rf /opt/conda/lib/cmake/mkl && \
    export TORCH_PATH=`python -c 'import torch;print(torch.utils.cmake_prefix_path)'` && \
    cd .. && \
    cmake -DCMAKE_PREFIX_PATH=${TORCH_PATH} \
        -DLOADGEN_DIR=${LOADGEN_DIR} \
        -DOpenCV_DIR=${OPENCV_DIR} \
        -DRapidJSON_INCLUDE_DIR=${RAPIDJSON_INCLUDE_DIR} \
        -Dgflags_DIR=${GFLAGS_DIR} \
        -DINTEL_EXTENSION_FOR_PYTORCH_PATH=${IPEX_PATH} \
        -B${PWD}/build \
        -H${PWD}/src && \
    cmake --build ${PWD}/build --config Release && \
    for JAR in $(find /workspace/retinanet-env/opencv -name *.jar); do rm ${JAR}; done

WORKDIR /workspace
RUN git clone https://github.com/mlcommons/inference.git inference
RUN for FILE in $(cat /workspace/redactions.txt); do rm -rf /workspace/${FILE}; rm -rf /workspace/workload_code/${FILE}; done

# export LD_LIBRARY_PATH=${OPENCV_DIR}/lib:${CONDA_PREFIX}/lib:${LD_LIBRARY_PATH} && \

ENV MALLOC_CONF "oversize_threshold:1,background_thread:true,metadata_thp:auto,dirty_decay_ms:9000000000,muzzy_decay_ms:9000000000"
ENV LD_PRELOAD "/opt/conda/lib/libjemalloc.so":"/opt/conda/lib/libiomp5.so":${LD_PRELOAD}
ENV CONDA_PREFIX "/opt/conda"
ENV MODEL_DIR=/model
ENV DATA_DIR=/data
